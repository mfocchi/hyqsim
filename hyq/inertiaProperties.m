%% Inertia properties expressed in the default link-frame, for each
%% link of the robot HyQ.
%%
%% OUT = INERTIAPROPERTIES(CONSTS, PARAMS)
%%
%% OUT is a structure with a field for each link of the robot, each
%% field being in turn a struct with the inertia properties.
%%
%% Depending on the original robot model and on the code generator
%% configuration, this function may take up to two arguments:
%%
%% CONSTS is a struct with all the constant properties
%% of the robot model; it is required if constant-folding was disabled
%% during code generation. Otherwise, the constant numerical properties
%% of the model appear explicitly as float literals.
%%
%% PARAMS is a struct with the current value of the
%% possibly varying model properties, i.e. the model parameters. This
%% argument is required if the original robot model is parametric. If
%% not, ignore the argument.
%%
%% This file has been automatically generated by RobCoGen.

function ip = inertiaProperties()


consts = evalin('base', 'consts');
params = evalin('base', 'params');

ip.lf_trunk.mass   = (params.trunk_mass);
ip.lf_trunk.com    = [(params.trunk_com_x); (params.trunk_com_y); (params.trunk_com_z)];
ip.lf_trunk.tensor = ...
    [[ (params.trunk_Ix)  ,	-((params.trunk_Ixy)),	-((params.trunk_Ixz))];
    [-((params.trunk_Ixy)),	  (params.trunk_Iy)  ,	-((params.trunk_Iyz))];
    [-((params.trunk_Ixz)),	-((params.trunk_Iyz)),	  (params.trunk_Iz)]];

com = ip.lf_trunk.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_trunk.mass;
ip.lf_trunk.tensor6D = [ip.lf_trunk.tensor, block; block', ip.lf_trunk.mass*eye(3)];


ip.lf_LF_hipassembly.mass   = consts.m_LF_hipassembly;
ip.lf_LF_hipassembly.com    = [consts.comx_LF_hipassembly; 0.0; consts.comz_LF_hipassembly];
ip.lf_LF_hipassembly.tensor = ...
    [[ consts.ix_LF_hipassembly  ,	-(consts.ixy_LF_hipassembly),	-(consts.ixz_LF_hipassembly)];
    [-(consts.ixy_LF_hipassembly),	  consts.iy_LF_hipassembly  ,	-(consts.iyz_LF_hipassembly)];
    [-(consts.ixz_LF_hipassembly),	-(consts.iyz_LF_hipassembly),	  consts.iz_LF_hipassembly]];

com = ip.lf_LF_hipassembly.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_LF_hipassembly.mass;
ip.lf_LF_hipassembly.tensor6D = [ip.lf_LF_hipassembly.tensor, block; block', ip.lf_LF_hipassembly.mass*eye(3)];


ip.lf_LF_upperleg.mass   = consts.m_LF_upperleg;
ip.lf_LF_upperleg.com    = [consts.comx_LF_upperleg; consts.comy_LF_upperleg; 0.0];
ip.lf_LF_upperleg.tensor = ...
    [[ consts.ix_LF_upperleg  ,	-(consts.ixy_LF_upperleg),	-(consts.ixz_LF_upperleg)];
    [-(consts.ixy_LF_upperleg),	  consts.iy_LF_upperleg  ,	-(consts.iyz_LF_upperleg)];
    [-(consts.ixz_LF_upperleg),	-(consts.iyz_LF_upperleg),	  consts.iz_LF_upperleg]];

com = ip.lf_LF_upperleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_LF_upperleg.mass;
ip.lf_LF_upperleg.tensor6D = [ip.lf_LF_upperleg.tensor, block; block', ip.lf_LF_upperleg.mass*eye(3)];


ip.lf_LF_lowerleg.mass   = consts.m_LF_lowerleg;
ip.lf_LF_lowerleg.com    = [consts.comx_LF_lowerleg; consts.comy_LF_lowerleg; consts.comz_LF_lowerleg];
ip.lf_LF_lowerleg.tensor = ...
    [[ consts.ix_LF_lowerleg  ,	-(0.0),	-(0.0)];
    [-(0.0),	  consts.iy_LF_lowerleg  ,	-(0.0)];
    [-(0.0),	-(0.0),	  consts.iz_LF_lowerleg]];

com = ip.lf_LF_lowerleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_LF_lowerleg.mass;
ip.lf_LF_lowerleg.tensor6D = [ip.lf_LF_lowerleg.tensor, block; block', ip.lf_LF_lowerleg.mass*eye(3)];


ip.lf_RF_hipassembly.mass   = consts.m_RF_hipassembly;
ip.lf_RF_hipassembly.com    = [consts.comx_RF_hipassembly; 0.0; consts.comz_RF_hipassembly];
ip.lf_RF_hipassembly.tensor = ...
    [[ consts.ix_RF_hipassembly  ,	-(consts.ixy_RF_hipassembly),	-(consts.ixz_RF_hipassembly)];
    [-(consts.ixy_RF_hipassembly),	  consts.iy_RF_hipassembly  ,	-(consts.iyz_RF_hipassembly)];
    [-(consts.ixz_RF_hipassembly),	-(consts.iyz_RF_hipassembly),	  consts.iz_RF_hipassembly]];

com = ip.lf_RF_hipassembly.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_RF_hipassembly.mass;
ip.lf_RF_hipassembly.tensor6D = [ip.lf_RF_hipassembly.tensor, block; block', ip.lf_RF_hipassembly.mass*eye(3)];


ip.lf_RF_upperleg.mass   = consts.m_RF_upperleg;
ip.lf_RF_upperleg.com    = [consts.comx_RF_upperleg; consts.comy_RF_upperleg; 0.0];
ip.lf_RF_upperleg.tensor = ...
    [[ consts.ix_RF_upperleg  ,	-(consts.ixy_RF_upperleg),	-(consts.ixz_RF_upperleg)];
    [-(consts.ixy_RF_upperleg),	  consts.iy_RF_upperleg  ,	-(consts.iyz_RF_upperleg)];
    [-(consts.ixz_RF_upperleg),	-(consts.iyz_RF_upperleg),	  consts.iz_RF_upperleg]];

com = ip.lf_RF_upperleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_RF_upperleg.mass;
ip.lf_RF_upperleg.tensor6D = [ip.lf_RF_upperleg.tensor, block; block', ip.lf_RF_upperleg.mass*eye(3)];


ip.lf_RF_lowerleg.mass   = consts.m_RF_lowerleg;
ip.lf_RF_lowerleg.com    = [consts.comx_RF_lowerleg; consts.comy_RF_lowerleg; consts.comz_RF_lowerleg];
ip.lf_RF_lowerleg.tensor = ...
    [[ consts.ix_RF_lowerleg  ,	-(0.0),	-(0.0)];
    [-(0.0),	  consts.iy_RF_lowerleg  ,	-(0.0)];
    [-(0.0),	-(0.0),	  consts.iz_RF_lowerleg]];

com = ip.lf_RF_lowerleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_RF_lowerleg.mass;
ip.lf_RF_lowerleg.tensor6D = [ip.lf_RF_lowerleg.tensor, block; block', ip.lf_RF_lowerleg.mass*eye(3)];


ip.lf_LH_hipassembly.mass   = consts.m_LH_hipassembly;
ip.lf_LH_hipassembly.com    = [consts.comx_LH_hipassembly; 0.0; consts.comz_LH_hipassembly];
ip.lf_LH_hipassembly.tensor = ...
    [[ consts.ix_LH_hipassembly  ,	-(consts.ixy_LH_hipassembly),	-(consts.ixz_LH_hipassembly)];
    [-(consts.ixy_LH_hipassembly),	  consts.iy_LH_hipassembly  ,	-(consts.iyz_LH_hipassembly)];
    [-(consts.ixz_LH_hipassembly),	-(consts.iyz_LH_hipassembly),	  consts.iz_LH_hipassembly]];

com = ip.lf_LH_hipassembly.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_LH_hipassembly.mass;
ip.lf_LH_hipassembly.tensor6D = [ip.lf_LH_hipassembly.tensor, block; block', ip.lf_LH_hipassembly.mass*eye(3)];


ip.lf_LH_upperleg.mass   = consts.m_LH_upperleg;
ip.lf_LH_upperleg.com    = [consts.comx_LH_upperleg; consts.comy_LH_upperleg; 0.0];
ip.lf_LH_upperleg.tensor = ...
    [[ consts.ix_LH_upperleg  ,	-(consts.ixy_LH_upperleg),	-(consts.ixz_LH_upperleg)];
    [-(consts.ixy_LH_upperleg),	  consts.iy_LH_upperleg  ,	-(consts.iyz_LH_upperleg)];
    [-(consts.ixz_LH_upperleg),	-(consts.iyz_LH_upperleg),	  consts.iz_LH_upperleg]];

com = ip.lf_LH_upperleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_LH_upperleg.mass;
ip.lf_LH_upperleg.tensor6D = [ip.lf_LH_upperleg.tensor, block; block', ip.lf_LH_upperleg.mass*eye(3)];


ip.lf_LH_lowerleg.mass   = consts.m_LH_lowerleg;
ip.lf_LH_lowerleg.com    = [consts.comx_LH_lowerleg; consts.comy_LH_lowerleg; consts.comz_LH_lowerleg];
ip.lf_LH_lowerleg.tensor = ...
    [[ consts.ix_LH_lowerleg  ,	-(0.0),	-(0.0)];
    [-(0.0),	  consts.iy_LH_lowerleg  ,	-(0.0)];
    [-(0.0),	-(0.0),	  consts.iz_LH_lowerleg]];

com = ip.lf_LH_lowerleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_LH_lowerleg.mass;
ip.lf_LH_lowerleg.tensor6D = [ip.lf_LH_lowerleg.tensor, block; block', ip.lf_LH_lowerleg.mass*eye(3)];


ip.lf_RH_hipassembly.mass   = consts.m_RH_hipassembly;
ip.lf_RH_hipassembly.com    = [consts.comx_RH_hipassembly; 0.0; consts.comz_RH_hipassembly];
ip.lf_RH_hipassembly.tensor = ...
    [[ consts.ix_RH_hipassembly  ,	-(consts.ixy_RH_hipassembly),	-(consts.ixz_RH_hipassembly)];
    [-(consts.ixy_RH_hipassembly),	  consts.iy_RH_hipassembly  ,	-(consts.iyz_RH_hipassembly)];
    [-(consts.ixz_RH_hipassembly),	-(consts.iyz_RH_hipassembly),	  consts.iz_RH_hipassembly]];

com = ip.lf_RH_hipassembly.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_RH_hipassembly.mass;
ip.lf_RH_hipassembly.tensor6D = [ip.lf_RH_hipassembly.tensor, block; block', ip.lf_RH_hipassembly.mass*eye(3)];


ip.lf_RH_upperleg.mass   = consts.m_RH_upperleg;
ip.lf_RH_upperleg.com    = [consts.comx_RH_upperleg; consts.comy_RH_upperleg; 0.0];
ip.lf_RH_upperleg.tensor = ...
    [[ consts.ix_RH_upperleg  ,	-(consts.ixy_RH_upperleg),	-(consts.ixz_RH_upperleg)];
    [-(consts.ixy_RH_upperleg),	  consts.iy_RH_upperleg  ,	-(consts.iyz_RH_upperleg)];
    [-(consts.ixz_RH_upperleg),	-(consts.iyz_RH_upperleg),	  consts.iz_RH_upperleg]];

com = ip.lf_RH_upperleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_RH_upperleg.mass;
ip.lf_RH_upperleg.tensor6D = [ip.lf_RH_upperleg.tensor, block; block', ip.lf_RH_upperleg.mass*eye(3)];


ip.lf_RH_lowerleg.mass   = consts.m_RH_lowerleg;
ip.lf_RH_lowerleg.com    = [consts.comx_RH_lowerleg; consts.comy_RH_lowerleg; consts.comz_RH_lowerleg];
ip.lf_RH_lowerleg.tensor = ...
    [[ consts.ix_RH_lowerleg  ,	-(0.0),	-(0.0)];
    [-(0.0),	  consts.iy_RH_lowerleg  ,	-(0.0)];
    [-(0.0),	-(0.0),	  consts.iz_RH_lowerleg]];

com = ip.lf_RH_lowerleg.com;
block = [  0,    -com(3),  com(2);
         com(3),  0,      -com(1);
        -com(2),  com(1),  0 ] * ip.lf_RH_lowerleg.mass;
ip.lf_RH_lowerleg.tensor6D = [ip.lf_RH_lowerleg.tensor, block; block', ip.lf_RH_lowerleg.mass*eye(3)];

assignin('base', 'ip',ip)
